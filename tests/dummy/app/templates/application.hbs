<nav class="navbar fixed-top navbar-dark bg-dark">
  <span class="navbar-brand mb-0 h1">Ember CLI Sortable Container</span>
</nav>

<div class="container-fluid">
  <h1 class="display-4">Sorting examples</h1>

  <div class="row">
    <div class="col-sm">
      <h2>Vertical</h2>
      <div class="card">
        {{!-- BEGIN-SNIPPET usage-sample --}}
        {{#sortable-container model class="card-body vertical"
          lockAxis=lockAxis
          projection=projection
          takeOut=takeOut
          dragHandle=dragHandle
          draggedClass='is-dragged'
          canPick=(action 'canPick')
          canPut=(action 'canPut')
          onDragStart=(action 'onDragStart')
          onDragEnd=(action 'onDragEnd')
          as |author i dragging|}}
            <div class="alert alert-primary {{unless dragHandle 'draggable'}} {{if dragging 'placeholder'}}">
              {{#if dragHandle}}
                <span class="material-icons drag-handle">drag_indicator</span>
              {{/if}}
              {{author.name}}
              <button class="float-right btn btn-sm btn-warning {{if author.lock 'active'}}"
                {{action "lock" author}}>
                Lock
              </button>
            </div>
        {{/sortable-container}}
        {{!-- END-SNIPPET --}}
      </div>

      <h2>Horizontal</h2>
      <div class="card">
        {{#sortable-container model class="card-body horizontal"
          lockAxis=lockAxis
          projection=projection
          takeOut=takeOut
          dragHandle=dragHandle
          canPick=(action 'canPick')
          canPut=(action 'canPut')
          onDragStart=(action 'onDragStart')
          as |author i dragging|}}
            <div class="alert alert-success {{if dragging 'placeholder'}}">
              {{#if dragging}}
                Drop here
              {{else}}
                {{#if dragHandle}}
                  {{#unless author.lock}}
                    <span class="material-icons drag-handle">drag_indicator</span>
                  {{/unless}}
                {{/if}}
                {{author.name}}
                {{#if author.lock}}
                  <span class="material-icons">lock</span>
                {{/if}}
              {{/if}}
            </div>
        {{/sortable-container}}
      </div>
    </div>
    <div class="col-sm">
      <h2>Options</h2>
      <p>
        <button class="btn btn-sm btn-primary {{if takeOut 'active'}}" {{action "toggle" "takeOut"}}>takeOut</button>
        &mdash; if <code>true</code>, the original item is removed from the list if you drag the ghost element out of the container. (Default: <code>true</code>)
      </p>
      <p>
        <button class="btn btn-sm btn-primary {{if projection 'active'}}" {{action "toggle" "projection"}}>projection</button>
        &mdash; if this is <code>true</code> and <code>takeOut</code> is <code>false</code>, the projected coordinates are used to determine the element position in the list while the ghost element is outside of the container. (Default: <code>false</code>)
      </p>
      <p>
        <button class="btn btn-sm btn-primary {{if lockAxis 'active'}}" {{action "toggle" "lockAxis"}}>lockAxis</button>
        &mdash; locks the element within container bounds; the other options above are ignored. (Default: <code>false</code>)
      </p>

      <p>
        <button class="btn btn-sm btn-primary {{if dragHandle 'active'}}" {{action "toggleDragHandle"}}>dragHandle</button>
        &mdash; optionally, you can specify a class name here, so the items can be only dragged by the element with this class;
        if not specified, you can drag items by any point. (Default: none)
      </p>

      <p>
        <button class="btn btn-sm btn-primary">draggedClass</button>
        &mdash; this option lets you can specify a class name to be added to the element being dragged. You can use this class to define the dragged element style.
        (By default, no class is added.)
      </p>

      <p>
        <button class="btn btn-sm btn-primary">orientation</button>
        &mdash; the addon tries to detect the list orientation automatically; however, if it fails for some reason, you can specify the orientation explicitly
        by setting this option to <code>'horizontal'</code> or <code>'vertical'</code>.
      </p>


      {{code-snippet name="usage-sample.hbs"}}

      <h4>Actions</h4>
      <p>
        By default, any element of the list can be dragged to any position. To implement a more complex behaviour, use the actions listed below.
      </p>
      <p>
        <b>canPick</b> &mdash; receives the state object that contains the current item as the <code>item</code> property
        and the clicked HTML elelent as the <code>eventTarget</code> property; returns a boolean telling the component if this item can be dragged.
      </p>
      <p>
        <b>canPut</b> &mdash; receives the state object <code>{index, originalIndex, item}</code>, returns a boolean telling the component if this item can be inserted here. You can use `state.prevItem()` and `state.nextItem()` to get the items before and after the current position.
      </p>
      {{code-snippet name="guards.js"}}

      <p>
        <b>onDragStart</b>, <b>onDragEnd</b> &mdash; these actions receive the state object and return a promise; they can be used to add animation when starting or finishing dragging, to save the updated list, etc.
      </p>
      {{code-snippet name="animate.js"}}

    </div>
  </div>
</div>
